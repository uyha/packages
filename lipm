#!/usr/bin/env bash

set -euo pipefail
# shellcheck disable=SC2034
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)

# Dasel value extractors
value() {
  if [[ "$#" -lt 2 ]]; then
    echo >&2 "Expecting 2 arguments: config path, and selector"
    exit 1
  fi
  dasel --file "$1" --selector "$2"
}
keys() {
  if [[ "$#" -lt 2 ]]; then
    echo >&2 "Expecting 2 arguments: config path, and selector"
    exit 1
  fi
  dasel --multiple --file "$1" --selector "$2.-"
}
values() {
  if [[ "$#" -lt 2 ]]; then
    echo >&2 "Expecting 2 arguments: config path, and selector"
    exit 1
  fi
  dasel --multiple --file "$1" --selector "$2.[*]"
}
length() {
  if [[ "$#" -lt 2 ]]; then
    echo >&2 "Expecting 2 arguments: config path, and selector"
    exit 1
  fi
  dasel --length --file "$1" --selector "$2"
}

# Dasel checkings
check-existing() {
  if [[ "$#" -lt 2 ]]; then
    echo >&2 "Expecting 2 arguments: config path, and selector"
    exit 1
  fi
  dasel --file "$1" --selector "$2" &>/dev/null
}

# Dasel requirements
require-type() {
  if [[ "$#" -lt 3 ]]; then
    echo >&2 "Expecting 3 arguments: config path, selector, and expected type"
    exit 1
  fi
  require-existing "$1" "$2"

  declare actual_type
  declare expected_type="$3"

  actual_type="$(dasel --file "$1" --selector "$2.[@]")"

  if [[ "$actual_type" != "$expected_type" ]]; then
    echo -e "${clear}${blue}$2${reset} is expected to be ${blue}$expected_type${reset}, but ${blue}$actual_type${reset} is given" >&2
    exit 1
  fi
}
require-array-type-all() {
  if [[ "$#" -lt 3 ]]; then
    echo >&2 "Expecting 3 arguments: config path, selector, and expected type"
    exit 1
  fi

  declare config="$1"
  declare selector="$2"
  declare type="$3"
  declare i number_elements

  require-type "$config" "$selector" array
  number_elements="$(length "$config" "$selector")"
  for ((i = 0; i < "$number_elements"; ++i)); do
    require-type "$config" "$selector.[$i]" "$type"
  done
}
require-existing() {
  if [[ "$#" -lt 2 ]]; then
    echo >&2 "Expecting 2 arguments: config path, and selector"
    exit 1
  fi
  if ! check-existing "$1" "$2"; then
    echo >&2 "$2 is required"
    exit 1
  fi
}

config-check() {
  if [[ "$#" -lt 2 ]]; then
    echo >&2 "Expecting 2 arguments: config path, and selector"
    exit 1
  fi

  declare config="$1"
  declare selector="$2"

  require-type "$config" "$selector.url" string
  require-type "$config" "$selector.type" string

  declare type

  type="$(value "$config" "$selector.type" | trim)"

  if check-existing "$config" "$selector.strip-components"; then
    require-type "$config" "$selector.strip-components" int
  fi

  if check-existing "$config" "$selector.output"; then
    if [[ "$type" == zip || "$type" == plain ]]; then
      require-type "$config" "$selector.output" string
    else
      require-array-type-all "$config" "$selector.output" string
    fi
  fi

  if check-existing "$config" "$selector.structure"; then
    require-type "$config" "$selector.structure" map
    while IFS= read -r key; do
      require-array-type-all "$config" "$selector.structure.$key" string
    done < <(keys "$config" "$selector.structure")
  fi

  if check-existing "$config" "$selector.rename"; then
    require-type "$config" "$selector.rename" map
    while IFS= read -r key; do
      require-type "$config" "$selector.rename.${key//./\\.}" string
    done < <(keys "$config" "$selector.rename")
  fi

  if check-existing "$config" "$selector.remove"; then
    require-array-type-all "$config" "$selector.remove" string
  fi
}

downtract-gzip() {
  if [[ "$#" -lt 2 ]]; then
    echo >&2 "Expecting 2 arguments: config path, and selector"
    exit 1
  fi

  declare config="$1"
  declare selector="$2"

  declare output url

  require-type "$config" "$selector.output" string

  url="$(value "$config" "$selector.url")"
  output="$(value "$config" "$selector.output")"

  curl --silent --location "$url" | gzip -d >"$output"
}
downtract-tarball() {
  if [[ "$#" -lt 2 ]]; then
    echo >&2 "Expecting 2 arguments: config path, and selector"
    exit 1
  fi

  declare config="$1"
  declare selector="$2"
  declare type="$3"

  declare -a output=()
  declare url
  declare strip=0

  if check-existing "$config" "$selector.strip-components"; then
    require-type "$config" "$selector.strip-components" int
    strip="$(value "$config" "$selector.strip-components" | trim)"
  fi

  url="$(value "$config" "$selector.url")"
  if check-existing "$config" "$selector.output"; then
    require-array-type-all "$config" "$selector.output" string
    readarray -t output < <(values "$config" "$selector.output")
  fi

  curl --silent --location "$url" |
    tar \
      --extract \
      --strip-components="$strip" \
      --"$type" \
      --file - \
      --wildcards "${output[@]}"
}
downtract-zip() {
  if [[ "$#" -lt 2 ]]; then
    echo >&2 "Expecting 2 arguments: config path, and selector"
    exit 1
  fi

  declare config="$1"
  declare selector="$2"

  declare output url

  url="$(value "$config" "$selector.url")"

  if check-existing "$config" "$selector.output"; then
    require-array-type-all "$config" "$selector.output" string
    readarray -t output < <(values "$config" "$selector.output")

    curl --silent --location --output tmp "$url"
    unzip -q -q tmp "${output[@]}"
  else
    curl --silent --location --output tmp "$url"
    unzip -q -q tmp
  fi

  rm tmp
}
downtract-plain() {
  if [[ "$#" -lt 2 ]]; then
    echo >&2 "Expecting 2 arguments: config path, and selector"
    exit 1
  fi

  declare config="$1"
  declare selector="$2"

  declare output url

  url="$(value "$config" "$selector.url")"

  if check-existing "$config" "$selector.output"; then
    require-type "$config" "$selector.output" string

    output="$(value "$config" "$selector.output")"

    curl --silent --location --output "$output" "$url"
  else
    curl --silent --location --remote-header-name --remote-name "$url"
  fi
}
trim() {
  perl -pe "s/^\s*(.*)\s*$/\1/"
}
populate() (
  if [[ "$#" -lt 2 ]]; then
    echo -e "Expecting 2 arguments: config path, and work directory"
    exit 1
  fi

  declare config="$1"
  declare dir="$2"

  cd "$dir"

  number_packages=$(length "$config" 'package')

  for ((i = 0; i < "$number_packages"; ++i)); do
    # Sanity check
    config-check "$config" "package.[$i]"
    type="$(value "$config" "package.[$i].type" | trim)"

    # Download and extract
    # shellcheck disable=SC2059
    printf "${clear}Downloading and extracting ${blue}$name${reset}"
    if [[ "$type" == gzip ]]; then
      downtract-gzip "$config" "package.[$i]"
    elif [[ "$type" == zip ]]; then
      downtract-zip "$config" "package.[$i]"
    elif [[ "$type" =~ ^tar.* ]]; then
      declare comp_type
      case "${type#tar.}" in
      bz) comp_type=bzip2 ;;
      xz) comp_type=xz ;;
      lz) comp_type=lzip ;;
      gz) comp_type=gzip ;;
      lzma) comp_type=lzma ;;
      lzop) comp_type=lzop ;;
      *)
        echo "${blue}$type${rest} is not supported"
        exit 1
        ;;
      esac
      downtract-tarball "$config" "package.[$i]" "$comp_type"
    elif [[ "$type" == plain ]]; then
      downtract-plain "$config" "package.[$i]"
    else
      echo -e "${blue}$type${reset} is not supported"
      exit 1
    fi

    # Move to destinated locations
    if check-existing "$config" "package.[$i].structure"; then
      # shellcheck disable=SC2059
      printf "${clear}Arranging files"
      while IFS= read -r dir; do
        mkdir -p "$dir"
        while IFS= read -r file; do
          mv "$file" "$dir"
        done < <(values "$config" "package.[$i].structure.${dir//./\\.}")
      done < <(keys "$config" "package.[$i].structure")
    fi

    if [[ -d bin ]]; then
      chmod +x bin/*
    fi

    # Rename files
    if check-existing "$config" "package.[$i].rename"; then
      # shellcheck disable=SC2059
      printf "${clear}Renaming files"
      while IFS= read -r source; do
        declare target
        target=$(value "$config" "package.[$i].rename.${source//./\\.}")
        mv "$source" "$target"
      done < <(keys "$config" "package.[$i].rename")
    fi

    # Remove files
    if check-existing "$config" "package.[$i].remove"; then
      # shellcheck disable=SC2059
      printf "${clear}Removing files"
      readarray -t remove < <(values "$config" "package.[$i].remove")
      rm -rf "${remove[@]}"
    fi
  done
)
check-file-readable() {
  if [[ "$#" -lt 1 ]]; then
    echo -e "Expecting 1 arguments: file path"
    exit 1
  fi

  declare file="$1"
  if [[ ! -e "$file" ]]; then
    echo -e "${blue}$file${reset} does not exist" >&2
    exit 1
  elif [[ ! -f "$file" ]]; then
    echo -e "${blue}$file${reset} is not a file" >&2
    exit 1
  elif [[ ! -r "$file" ]]; then
    echo -e "${blue}$file${reset} is unreadable" >&2
    exit 1
  fi
}
finalize() {
  if [[ "$#" -lt 2 ]]; then
    echo -e "Expecting 2 arguments: working directory, and name"
    exit 1
  fi

  declare tmp="$1"
  declare name="$2"

  if [[ -d "$PREFIX/$name" ]]; then
    stow --delete --dir="$PREFIX" --target="$TARGET" "$name"
    rm -rf "${PREFIX:?}/$name"
  fi

  mv "$tmp" "$PREFIX/$name"
  chmod +rx "$PREFIX/$name"
  stow --dir="$PREFIX" --target="$TARGET" "$name"
}

blue="\e[34m"
reset="\e[0m"
clear="\r\033[0K"

if [[ "$#" -lt 1 ]]; then
  echo >&2 "Expecting the name of package"
  exit 1
fi

PREFIX="${PREFIX:-/opt}"
TARGET="${TARGET:-/usr/local}"

name="$1"
config="$SCRIPT_DIR/$name.toml"
tmp="$(mktemp -d)"

check-file-readable "$config"
populate "$config" "$tmp"
finalize "$tmp" "$name"

# shellcheck disable=SC2059
printf "${clear}Finished installing ${blue}$name${reset}\n"
